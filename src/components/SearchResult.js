/*
* This is the 'workhorse component where the JavaScript object (obtained from the API call) is
* being analysed and data extracted for the definition and usage output of the app
*/

/* Import of the main stylesheet generated by the SCSS files */
import '../scss/main.css';

/*
 The props used in this component is passed as state and by the use of the useRef hook
* to persist the searchWord down from the WordBox component. Variable names used in this
* component were chosen to correspond to the actual names of the keys in objects in the
* JavaScript object returned from the API call
*/
export const SearchResult = ({searchWord, error, data}) => {

    /*
    * The purpose of this function is to analyse the deeply embedded usage data with the help of
    * try catch block where the information does not exist for a specific definition of a word.
    * The data was also not structured in the same way for all word definitions based on the number
    * of arrays per individual word definition. In short the JavaScript object was very complex in
    * nature.
    */
    const returnExampleSentence = (sseqArray) => {
        if (sseqArray.length > 1) {
            /* This case dealt with definitions with multiple arrays per definition */
            // eslint-disable-next-line array-callback-return
            sseqArray.map((sense, index) => {
                try {
                    return sense[index][1]["dt"][1][1][0]["t"];
                } catch (e) {
                   return false
                }
            })
        } else if (sseqArray.length === 1) {
            /* This case dealt with singular arrays per definition */
            try {
                return sseqArray[0][1]["dt"][1][1][0]["t"]
            } catch (e) {
                return false
            }
        } else {
            return `No usage examples available.`;
        }
    }

    /* The initial mapping of the data array received back from the API call is done in the body of the
    * return portion of this component for simplicityâ€™s sake considering the complexity of the data. */
    return (
        <div className={"result-box"}>
            {/* The display of the search word if there is one */}
            <h1>{searchWord && `${searchWord}`}</h1>
            <p>{searchWord && `A usage example will be provided in green if available in the dictionary.`}</p>
            {/* Display of the error status in the console if there was an error */}
            {error && console.log(`HTTP error: ${error}`)}
            {/* Display of the data array if there is one */}
            {data &&
                /* The main loop to get to the respective word definitions */
                data.map((differentDefinition, index) => {
                    /* The return value associated with the first map method on the data array */
                    return (
                        <div>
                            {/* Display of the individual definitions of a word */}
                            <h2>{`Definition ${index + 1}`}</h2>
                            <ul>
                                <li key={index}>{differentDefinition.shortdef}</li>
                            </ul>
                            {/* Display of the respective usage example. I.e., Example sentences. */}
                            {(differentDefinition.def[0].sseq).map((sseqArray, index) => {
                                        return (
                                            <p key={index}>
                                                {/* Invocation of the function above to handle the complex nature
                                                 of then usage example data and then to display it if there was
                                                 any */}
                                                {returnExampleSentence(sseqArray) &&
                                                    `Usage: ${returnExampleSentence(sseqArray)}`}
                                            </p>
                                        )
                                    })}
                        </div>
                    )
                })
            }
        </div>
    )
}