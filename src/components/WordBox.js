/* Import of the axios module needed to fetch the API data */
import axios from "axios";

/* Import of modules needed in this component */
import {useEffect, useState, useRef} from "react";
import {useNavigate} from "react-router-dom";

/* Import styled components for use in this component */
import {StyledForm, StyledInput, StyledLabel, StyledSearchButton} from "./styled-components";

/* Import of component needed in this component for the useNavigate functionality */
import {SearchResult} from "./SearchResult";

/* Import of main stylesheet generated by SCSS files */
import '../scss/main.css';

/*
* This component defines a simple input form and handles the API fetch functionality based on
* the input received from the form.
*/
export const WordBox = () => {

    /* Declaration and intialisation of state */
    const [searchWord, setSearchWord] = useState('');
    const [dataRequest, setDataRequest] = useState(null)
    const [error, setError] = useState(null);
    /* Declaration and initialisation of useRef hook */
    const inputRef = useRef(null);

    /* useEffect hook to handle API fetch upon change of the searchWord */
    useEffect(() => {

        /* Setup of the API fetch URL using a variable word from the input form as well as the API key
        from the .env file */
        const fetchURL = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${searchWord}?key=${process.env.REACT_APP_DICTIONARY_API_KEY}`;

        /* Using axios to fetch the data from the Merriam-Webster Dictiorary API */
        axios.get(fetchURL)
            .then(res => {
                /* This if statement is to handle the initial state where a string message is returned from the API
                * when no search word is entered in the URL */
                if (typeof res.data === 'string' || res.data instanceof String) {
                    setDataRequest([]);
                } else {
                    setDataRequest(res.data);
                }
            }).catch(err => {
            setError(err);
            console.log(err);
        });

    /* This useEffect hook only has the searchWord dependency. */
    }, [searchWord])

    /* This functions handles clicks on the StyledSearchButton style Link component
    * button. It also handles routing to the SearchResult component by use of the
    * useNavigate hook. The hook is set up and initialised outside the function */
    let navigate = useNavigate()
    const onClickHandler = () => {
        setSearchWord(inputRef.current.value);
        inputRef.current.value = '';
        navigate("searchResult");
    }

    /* The return of this component makes use of various styled-components to render the input form and take in
    * information from it. The searchWord information is retained by the use of the useRef hook there is
    * a click handler on the StyledSearchButton. The state and information from the useRef hook is passed down
    * to the SearchResult page as props. */
    return (
        <div className={"word-box-container"}>
            <StyledForm className={"word-form"}>
                <StyledLabel htmlFor={"word-input-box"}>Please enter a word to search and click on the search button</StyledLabel>
                <StyledInput
                    style={{fontSize: 24}}
                    type={"text"}
                    className={"word-input-box"}
                    ref={inputRef}
                    name={"wordInput"}
                />
                <StyledSearchButton
                    // to={"/searchResult"}
                    type={"button"}
                    className={"btn-word-select"}
                    onClick={onClickHandler}
                >
                    Search
                </StyledSearchButton>
            </StyledForm>
            <SearchResult
                error={error}
                data={dataRequest}
                searchWord={searchWord}
            />
        </div>
    )
}